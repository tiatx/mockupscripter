{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>PSD Mockup Generator</title>\
    <script src="https://cdnjs.cloudflare.com/ajax/libs/psd.js/4.0.0/psd.min.js"></script>\
    <style>\
        body \{ font-family: Arial, sans-serif; text-align: center; \}\
        .canvas-container \{ display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; max-width: 900px; margin: auto; \}\
        .canvas-wrapper \{ position: relative; display: inline-block; \}\
        canvas \{ border: 1px solid black; max-width: 100%; \}\
        input[type="file"] \{ margin: 10px; \}\
        .scale-handle \{ position: absolute; bottom: 5px; right: 5px; cursor: nwse-resize; width: 15px; height: 15px; background: red; \}\
    </style>\
</head>\
<body>\
\
    <h1>PSD Mockup Generator</h1>\
    <input type="file" id="psdUpload" accept=".psd" multiple>\
    <input type="file" id="imageUpload" accept="image/png, image/jpeg">\
    <button id="exportBtn">Export All</button>\
    \
    <div class="canvas-container" id="canvasContainer"></div>\
\
    <script>\
        let psdFiles = [];\
        let uploadedImage = null;\
\
        document.getElementById('psdUpload').addEventListener('change', async function(event) \{\
            const files = event.target.files;\
            if (!files.length) return;\
\
            const container = document.getElementById("canvasContainer");\
            container.innerHTML = "";  \
            psdFiles = [];\
\
            for (let file of files) \{\
                const reader = new FileReader();\
                reader.onload = async function(e) \{\
                    const psd = await PSD.fromURL(e.target.result);\
                    psd.parse();\
                    \
                    const smartLayers = psd.children().filter(layer => layer.isSmartObject);\
                    if (smartLayers.length !== 1) \{\
                        alert(`PSD "$\{file.name\}" must have exactly 1 smart layer!`);\
                        return;\
                    \}\
\
                    psdFiles.push(\{ file, psd, smartLayer: smartLayers[0] \});\
\
                    const wrapper = document.createElement("div");\
                    wrapper.classList.add("canvas-wrapper");\
\
                    const canvas = document.createElement("canvas");\
                    const ctx = canvas.getContext("2d");\
                    const img = new Image();\
                    img.src = psd.image.toBase64();\
\
                    img.onload = function() \{\
                        canvas.width = img.width;\
                        canvas.height = img.height;\
                        ctx.drawImage(img, 0, 0);\
                    \};\
\
                    wrapper.appendChild(canvas);\
                    container.appendChild(wrapper);\
                \};\
                reader.readAsDataURL(file);\
            \}\
        \});\
\
        document.getElementById('imageUpload').addEventListener('change', function(event) \{\
            const file = event.target.files[0];\
            if (!file || psdFiles.length === 0) return alert("Upload PSD files first!");\
\
            const reader = new FileReader();\
            reader.onload = function(e) \{\
                uploadedImage = e.target.result;\
            \};\
            reader.readAsDataURL(file);\
        \});\
\
        document.getElementById('exportBtn').addEventListener('click', function() \{\
            if (!uploadedImage) return alert("Upload a new design before exporting!");\
\
            psdFiles.forEach(async (\{ file \}) => \{\
                const formData = new FormData();\
                formData.append("psd", file);\
                formData.append("image", dataURLtoBlob(uploadedImage));\
\
                const response = await fetch("http://127.0.0.1:5000/replace-layer", \{\
                    method: "POST",\
                    body: formData\
                \});\
\
                const blob = await response.blob();\
                const link = document.createElement("a");\
                link.href = URL.createObjectURL(blob);\
                link.download = `$\{file.name.replace(".psd", "")\}_modified.png`;\
                link.click();\
            \});\
        \});\
\
        function dataURLtoBlob(dataURL) \{\
            const arr = dataURL.split(",");\
            const mime = arr[0].match(/:(.*?);/)[1];\
            const bstr = atob(arr[1]);\
            let n = bstr.length;\
            const u8arr = new Uint8Array(n);\
            while (n--) \{\
                u8arr[n] = bstr.charCodeAt(n);\
            \}\
            return new Blob([u8arr], \{ type: mime \});\
        \}\
    </script>\
\
</body>\
</html>\
}